import 'package:async/async.dart';
import 'package:florafi/src/component/component_builder.g.dart';
import 'package:test/test.dart';
import 'package:florafi/florafi.dart';

import 'test_communicator.dart';

void main() {
  group("Farm.publish", () {
    late Farm farm;
    late TestCommunicator communicator;
    // late StreamQueue<FarmEvent> events;

    setUp(() {
      farm = Farm();
      communicator = TestCommunicator();
      farm.communicator = communicator;
      // events = StreamQueue<FarmEvent>(farm.events);
      // events.skip(1); // roomInstall
    });

    test('handles publish()', () {
      farm.publish("t1", "m1");
      var msg = communicator.sentMessages.removeAt(0);
      expect(msg.topic, "t1");
      expect(msg.message, "m1");
    });
  });

  group("_processDeviceAnnouncementMessage", () {
    late Farm farm;
    late StreamQueue<FarmEvent> events;

    setUp(() {
      farm = Farm();
      events = StreamQueue<FarmEvent>(farm.events);
      farm.communicator = TestCommunicator();
      // events.skip(1); // skip farmReady

      final List<FarmMessage> messages = [
        FarmMessage('florafi/device/d1',
            '{"room":"Q1","deactivated":false, "components":["light"]}'),
        FarmMessage('florafi/device/d2', '{"room":"Q1","deactivated":true}'),
        FarmMessage('florafi/device/d3', '{"room":"Q2","deactivated":false}'),
      ];

      for (var m in messages) {
        farm.processMessage(m);
      }
    });

    test('emits install events', () async {
      // events generated by 1st message
      expect((await events.next).type, FarmEventType.farmReady);

      var event = await events.next;
      expect(event.farm, farm);
      expect(event.type, equals(FarmEventType.roomInstall));
      expect(event.room?.id, "Q1");
      expect(event.device, null);

      event = await events.next;
      expect(event.type, equals(FarmEventType.roomUpdate));
      expect(event.room?.id, "Q1");

      event = await events.next;
      expect(event.farm, farm);
      expect(event.type, equals(FarmEventType.roomComponentInstall));
      expect(event.room?.id, "Q1");
      expect(event.component?.mqttId, "light");

      event = await events.next;
      expect(event.farm, farm);
      expect(event.type, equals(FarmEventType.deviceInstall));
      expect(event.room, null);
      expect(event.device?.id, "d1");

      // 2nd message
      event = await events.next;
      expect(event.type, equals(FarmEventType.roomUpdate));
      expect(event.room?.id, "Q1");

      event = await events.next;
      expect(event.type, equals(FarmEventType.deviceInstall));
      expect(event.device?.id, "d2");

      // 3rd message
      event = await events.next;
      expect(event.type, equals(FarmEventType.roomInstall));
      expect(event.room?.id, "Q2");

      event = await events.next;
      expect(event.type, equals(FarmEventType.roomUpdate));
      expect(event.room?.id, "Q2");

      event = await events.next;
      expect(event.type, equals(FarmEventType.deviceInstall));
      expect(event.device?.id, "d3");

      // move d2 to Q2
      farm.processMessage(FarmMessage(
          'florafi/device/d2', '{"room":"Q2","deactivated":false}'));

      event = await events.next;
      expect(event.type, equals(FarmEventType.roomUpdate));
      expect(event.room?.id, "Q1");

      event = await events.next;
      expect(event.type, equals(FarmEventType.roomUpdate));
      expect(event.room?.id, "Q2");

      event = await events.next;
      expect(event.type, equals(FarmEventType.deviceUpdate));
      expect(event.device?.id, "d2");

      // remove d2 from Q2
      farm.processMessage(
          FarmMessage('florafi/device/d2', '{"room":"","deactivated":false}'));

      event = await events.next;
      expect(event.type, equals(FarmEventType.roomUpdate));
      expect(event.room?.id, "Q2");

      event = await events.next;
      expect(event.type, equals(FarmEventType.deviceUpdate));
      expect(event.device?.id, "d2");

      // join d2 on Q1
      farm.processMessage(FarmMessage(
          'florafi/device/d2', '{"room":"Q1","deactivated":false}'));

      event = await events.next;
      expect(event.type, equals(FarmEventType.roomUpdate));
      expect(event.room?.id, "Q1");

      event = await events.next;
      expect(event.type, equals(FarmEventType.deviceUpdate));
      expect(event.device?.id, "d2");

      // forget q2
      farm.processMessage(FarmMessage('florafi/device/d2', ''));

      event = await events.next;
      expect(event.type, equals(FarmEventType.deviceUninstall));
      expect(event.device?.id, "d2");

      event = await events.next;
      expect(event.type, equals(FarmEventType.roomUpdate));
      expect(event.room?.id, "Q1");
    });

    test('found 3 devices', () {
      expect(farm.devices.length, equals(3));
    });

    test('found 2 rooms', () {
      expect(farm.rooms.length, equals(2));
    });

    test('handles device "deactivated" flag.', () {
      expect(farm.devices["d1"]?.isDeactivated, equals(false));
      expect(farm.devices["d2"]?.isDeactivated, equals(true));
      expect(farm.devices["d3"]?.isDeactivated, equals(false));
    });

    test('handles updated "deactivated" flag.', () {
      final data = '{"room":"Q1","deactivated":true}';
      farm.processMessage(FarmMessage('florafi/device/d1', data));
      expect(farm.devices["d1"]?.isDeactivated, equals(true));
    });

    test('handles updated "room" flag.', () {
      final data = '{"room":"Q3","deactivated":false}';
      farm.processMessage(FarmMessage('florafi/device/d1', data));
      expect(farm.devices.length, equals(3));
      expect(farm.rooms.length, equals(3));
    });

    test('handles "forget device" (empty) message.', () {
      farm.processMessage(FarmMessage('florafi/device/d1', ''));
      expect(farm.devices.length, equals(2));
      expect(farm.devices.containsKey("d1"), equals(false));
      expect(farm.rooms.length, equals(2));
    });

    test('handles malformed topic.', () {
      final data = '{"room":"toBeIgnored","deactivated":false}';
      farm.processMessage(FarmMessage('florafi/device', data));
      farm.processMessage(FarmMessage('florafi/device/', data));
      farm.processMessage(FarmMessage('florafi/device/d4/', data));
      farm.processMessage(
          FarmMessage('florafi/device/d5/trailingSubTopic', data));

      expect(farm.devices.length, equals(3));
      expect(farm.rooms.length, equals(2));
    });

    test('handles malformed message (missing "room" key).', () {
      final data = '{"deactivated":false}';
      farm.processMessage(FarmMessage('florafi/device/d4', data));

      expect(farm.devices.length, equals(3));
      expect(farm.rooms.length, equals(2));
    });

    test('handles malformed message (missing "deactivated" key).', () {
      final data = '{"room": "toBeIgnored"}';
      farm.processMessage(FarmMessage('florafi/device/d4', data));

      expect(farm.devices.length, equals(3));
      expect(farm.rooms.length, equals(2));
    });

    test('handles empty "room" key.', () {
      final data = '{"room":"","deactivated":false}';
      farm.processMessage(FarmMessage('florafi/device/d4', data));

      expect(farm.devices.length, equals(4));
      expect(farm.rooms.length, equals(2));
    });

    test('handles null "room" key.', () {
      final data = '{"room":null,"deactivated":false}';
      farm.processMessage(FarmMessage('florafi/device/d4', data));

      expect(farm.devices.length, equals(4));
      expect(farm.rooms.length, equals(2));
    });

    test('subscribe to component topics', () {
      final subscriptions =
          (farm.communicator as TestCommunicator).subscriptions;
      expect(subscriptions.containsKey("florafi/room/Q1/state/light/#"), true);
      expect(subscriptions.containsKey("florafi/device/d1/component/light/#"),
          true);
    });
  });

  group("_processRoomStateMessage()", () {
    late Farm farm;
    late StreamQueue<FarmEvent> events;
    // late Device device;
    late Room room;

    setUp(() {
      farm = Farm();
      room = farm.rooms["r1"] = Room("r1", farm: farm);
      final device = farm.devices["d1"] = Device(id: "d1", farm: farm);
      device.room = room;
      device.components.add(ComponentBuilder.fromId("ebbflow", device));

      events = StreamQueue<FarmEvent>(farm.events);
      events.skip(1); // farmReady
    });

    test('ignores invalid topic.', () {
      farm.processMessage(FarmMessage('florafi/room/r1/state', "foo"));
      farm.processMessage(FarmMessage('florafi/room/r1/state/', "foo"));
      farm.processMessage(
          FarmMessage('florafi/room/r1/state/unknown-component', "foo"));
      farm.processMessage(
          FarmMessage('florafi/room/r1/state/unknown-component/', "foo"));
      farm.processMessage(FarmMessage('florafi/room/r1/state/daytime/', "foo"));
      farm.processMessage(
          FarmMessage('florafi/room/r1/state/ebbflow/foo/bar', "foo"));
      expect(room.ebbflow!.phase, null);
    });

    test('consumes component state.', () {
      farm.processMessage(
          FarmMessage('florafi/room/r1/state/ebbflow/phase', "1"));
      expect(room.ebbflow!.phase, 1);
    });

    test('emits event.', () async {
      farm.processMessage(
          FarmMessage('florafi/room/r1/state/ebbflow/phase', "1"));
      final event = await events.next;
      expect(event.type, FarmEventType.roomState);
      expect(event.farm, farm);
      expect(event.room, room);
      expect(event.component, room.ebbflow);
      expect(event.propertyId, "phase");
      expect(event.propertyValue as int, 1);
    });
  });

  group("_processRoomLogMessage()", () {
    late Farm farm;
    late StreamQueue<FarmEvent> events;

    final logJson =
        '{"message":"Some message","time":1645894274,"device":"d1","component":"daytime"}';

    setUp(() {
      farm = Farm();
      farm.logListSize = 3;
      events = StreamQueue<FarmEvent>(farm.events);
    });

    test(r'ignores invalid topic.', () {
      farm.processMessage(FarmMessage('florafi/room/r1/log', logJson));
      farm.processMessage(FarmMessage('florafi/room/r1/log/', logJson));
      expect(farm.logList.length, 0);
    });

    test(r'ignores invalid log level.', () {
      farm.processMessage(
          FarmMessage('florafi/room/r1/log/invalid-level', logJson));
      expect(farm.logList.length, 0);
    });

    test(r'handles "debug" log.', () {
      farm.processMessage(FarmMessage('florafi/room/r1/log/debug', logJson));
      expect(farm.logList.length, 1);
      final logLine = farm.logList[0];
      expect(logLine.level, LogLevel.debug);
      expect(logLine.message, "Some message");
      expect(logLine.room.id, "r1");
      expect(logLine.deviceId, "d1");
      expect(logLine.componentId, "daytime");
      expect(
          logLine.time, DateTime.fromMillisecondsSinceEpoch(1645894274 * 1000));
    });

    test(r'handles "info" log.', () {
      farm.processMessage(FarmMessage('florafi/room/r1/log/info', logJson));
      expect(farm.logList.length, 1);
      expect(farm.logList[0].level, LogLevel.info);
    });

    test(r'handles "warning" log.', () {
      farm.processMessage(FarmMessage('florafi/room/r1/log/warning', logJson));
      expect(farm.logList.length, 1);
      expect(farm.logList[0].level, LogLevel.warning);
    });

    test(r'handles "error" log.', () {
      farm.processMessage(FarmMessage('florafi/room/r1/log/error', logJson));
      expect(farm.logList.length, 1);
      expect(farm.logList[0].level, LogLevel.error);
    });

    test('handles log storage.', () {
      farm.logListSize = 0;
      farm.processMessage(FarmMessage('florafi/room/r1/log/debug', logJson));
      expect(farm.logList.length, 0);

      farm.logListSize = 2;
      farm.processMessage(FarmMessage('florafi/room/r1/log/debug', logJson));
      expect(farm.logList.length, 1);
      farm.processMessage(FarmMessage('florafi/room/r1/log/info', logJson));
      expect(farm.logList.length, 2);
      farm.processMessage(FarmMessage('florafi/room/r1/log/warning', logJson));
      expect(farm.logList.length, 2);
    });

    test(r'emits "log" event.', () async {
      farm.processMessage(FarmMessage('florafi/room/r1/log/error', logJson));

      expect((await events.next).type, FarmEventType.farmReady);
      expect((await events.next).type, FarmEventType.roomInstall);

      final event = await events.next;
      expect(event.farm, farm);
      expect(event.type, FarmEventType.roomLog);
      expect(event.log, farm.logList[0]);
      expect(event.room?.id, "r1");
    });
  });

  group("_processRoomAlertMessage()", () {
    late Farm farm;
    late StreamQueue<FarmEvent> events;

    setUp(() {
      farm = Farm();
      events = StreamQueue<FarmEvent>(farm.events);
    });

    test(r'ignores invalid topic.', () {
      farm.processMessage(FarmMessage('florafi/room/r1/alert', '123'));
      farm.processMessage(FarmMessage('florafi/room/r1/alert/', '123'));
      farm.processMessage(FarmMessage('florafi/room/r1/alert/info', '123'));
      farm.processMessage(FarmMessage('florafi/room/r1/alert/info/', '123'));

      expect(farm.alerts.length, 0);
    });

    test(r'ignores invalid type.', () {
      farm.processMessage(
          FarmMessage('florafi/room/r1/alert/invalid-type/some-alert', '123'));
      expect(farm.alerts.length, 0);
    });

    test(r'handles info alert.', () {
      farm.processMessage(
          FarmMessage('florafi/room/r1/alert/info/info-alert', '123'));
      expect(farm.alerts.containsKey('r1.info-alert'), true);
      expect(farm.alerts.length, 1);
      final alert = farm.alerts["r1.info-alert"];
      expect(alert?.room.id, 'r1');
      expect(alert?.id, 'info-alert');
      expect(alert?.type, AlertType.info);
      expect(alert?.timestamp, 123);
      expect(alert?.isActive, true);
    });

    test(r'handles warning alert.', () {
      farm.processMessage(
          FarmMessage('florafi/room/r1/alert/warning/warning-alert', '123'));
      expect(farm.alerts.containsKey('r1.warning-alert'), true);
      expect(farm.alerts.length, 1);
      expect(farm.alerts["r1.warning-alert"]?.type, AlertType.warning);
    });

    test(r'handles error alert.', () {
      farm.processMessage(
          FarmMessage('florafi/room/r1/alert/error/error-alert', '123'));
      expect(farm.alerts.containsKey('r1.error-alert'), true);
      expect(farm.alerts.length, 1);
      expect(farm.alerts["r1.error-alert"]?.type, AlertType.error);
    });

    test(r'handles alert dismiss.', () {
      farm.processMessage(
          FarmMessage('florafi/room/r1/alert/error/error-alert', '123'));
      expect(farm.alerts.containsKey('r1.error-alert'), true);
      expect(farm.alerts.length, 1);

      farm.processMessage(
          FarmMessage('florafi/room/r1/alert/error/error-alert', ''));
      expect(farm.alerts.containsKey('r1.error-alert'), false);
      expect(farm.alerts.length, 0);
    });

    test(r'emits alert events.', () async {
      farm.processMessage(
          FarmMessage('florafi/room/r1/alert/error/error-alert', '123'));
      expect(farm.alerts.containsKey('r1.error-alert'), true);
      expect(farm.alerts.length, 1);

      events.skip(2); // skip farmReady, roomInstall event
      var event = await events.next;

      expect(event.farm, farm);
      expect(event.type, FarmEventType.roomAlert);
      expect(event.room?.id, "r1");
      expect(event.alert?.id, "error-alert");
      expect(event.alert?.isActive, true);

      farm.processMessage(
          FarmMessage('florafi/room/r1/alert/error/error-alert', ''));

      event = await events.next;
      expect(event.type, FarmEventType.roomAlert);
      expect(event.room?.id, "r1");
      expect(event.alert?.id, "error-alert");
      expect(event.alert?.isActive, false);
    });
  });

  group("_processRoomNotificationMessage()", () {
    late Farm farm;
    late StreamQueue<FarmEvent> events;

    setUp(() {
      farm = Farm();
      events = StreamQueue<FarmEvent>(farm.events);
      events.skip(2); // farmReady, roomInstall
    });

    test(r'just works.', () async {
      farm.processMessage(
          FarmMessage('florafi/room/r1/notification', 'foobar'));
      final event = await events.next;
      final notification = event.notification;
      expect(event.farm, farm);
      expect(event.room?.id, 'r1');
      expect(notification?.roomId, 'r1');
      expect(notification?.message, 'foobar');
      expect(notification?.time is DateTime, true);
      expect(notification?.time.isUtc, false);
    });
  });

  group("_processHomieMessage()", () {
    late Farm farm;
    late StreamQueue<FarmEvent> events;

    // homie/d1/$implementation/ota/enabled true

    final configJson = '{"name":"MyDevice","wifi":{"ssid":"MyNetwork"},'
        '"mqtt":{"host":"farm.florafi.net","port":123,"ssl":true,"auth":true},'
        '"ota":{"enabled":true},'
        '"settings":{"boolSetting":false, "stringSetting":"foobar", "intSetting": 1234}}';

    final List<FarmMessage> messages = [
      FarmMessage('florafi/device/d1', '{"room":"","deactivated":false}'),
    ];

    setUp(() {
      farm = Farm();
      events = StreamQueue<FarmEvent>(farm.events);

      for (var m in messages) {
        farm.processMessage(FarmMessage(m.topic, m.data));
      }

      events.skip(2); // skip farmReady, deviceInstall
    });

    test(r'handles $state message.', () async {
      final device = farm.devices["d1"];
      expect(device?.status, DeviceStatus.unknown);
      expect(device?.isOnline, false);

      farm.processMessage(FarmMessage(r'homie/d1/$state', 'init'));
      expect(device?.status, DeviceStatus.init);
      expect(device?.isOnline, true);

      var event = await events.next;
      expect(event.type, FarmEventType.deviceStatus);
      expect(event.device, equals(device));

      farm.processMessage(FarmMessage(r'homie/d1/$state', 'disconnected'));
      expect(device?.status, DeviceStatus.disconnected);
      expect(device?.isOnline, false);

      farm.processMessage(FarmMessage(r'homie/d1/$state', 'ready'));
      expect(device?.status, DeviceStatus.ready);
      expect(device?.isOnline, true);

      farm.processMessage(FarmMessage(r'homie/d1/$state', 'lost'));
      expect(device?.status, DeviceStatus.lost);
      expect(device?.isOnline, false);

      farm.processMessage(FarmMessage(r'homie/d1/$state', 'alert'));
      expect(device?.status, DeviceStatus.alert);
      expect(device?.isOnline, true);

      farm.processMessage(FarmMessage(r'homie/d1/$state', 'sleeping'));
      expect(device?.status, DeviceStatus.sleeping);
      expect(device?.isOnline, false);
    });

    test(r'handles $stats/uptime message.', () async {
      final device = farm.devices["d1"];
      expect(device?.uptime, -1);
      farm.processMessage(FarmMessage(r'homie/d1/$stats/uptime', '123'));
      expect(device?.uptime, 123);

      var event = await events.next;
      expect(event.type, FarmEventType.deviceState);
      expect(event.device, equals(device));
    });

    test(r'handles $name message.', () {
      final device = farm.devices["d1"];
      farm.processMessage(FarmMessage(r'homie/d1/$name', 'Some Device'));
      expect(device?.name, equals('Some Device'));
    });

    test(r'handles $mac message.', () {
      final device = farm.devices["d1"];
      farm.processMessage(FarmMessage(r'homie/d1/$mac', '11:22:33:44:55:66'));
      expect(device?.wifi.mac, '11:22:33:44:55:66');
      expect(device?.wifi.isLoaded, false);
    });

    test(r'handles $localip message.', () {
      final device = farm.devices["d1"];
      farm.processMessage(FarmMessage(r'homie/d1/$localip', '1.2.3.4'));
      expect(device?.wifi.ip, '1.2.3.4');
      expect(device?.wifi.isLoaded, false);
    });

    test(r'handles $stats/signal message.', () async {
      final device = farm.devices["d1"];
      farm.processMessage(
          FarmMessage(r'homie/d1/$stats/signal', 'invalidPayload'));
      expect(device?.wifi.signal, -1);

      farm.processMessage(FarmMessage(r'homie/d1/$stats/signal', '78'));
      expect(device?.wifi.signal, 78);

      expect(device?.wifi.isLoaded, false);

      var event = await events.next;
      expect(event.type, FarmEventType.deviceState);
      expect(event.device, equals(device));
    });

    test(r'handles $fw messages.', () {
      final device = farm.devices["d1"];

      farm.processMessage(FarmMessage(r'homie/d1/$fw/name', 'fw-name'));
      farm.processMessage(FarmMessage(r'homie/d1/$fw/version', '1.2.3'));
      expect(device?.firmware.name, 'fw-name');
      expect(device?.firmware.version, '1.2.3');
      expect(device?.firmware.isLoaded, false);

      farm.processMessage(FarmMessage(r'homie/d1/$fw/checksum', 'abcd'));
      expect(device?.firmware.checksum, 'abcd');
      expect(device?.firmware.isLoaded, true);
    });

    test(r'handles $implementation/config message.', () {
      final device = farm.devices["d1"];

      farm.processMessage(
          FarmMessage(r'homie/d1/$implementation/config', configJson));

      expect(device?.name, 'MyDevice');
      expect(device?.wifi.ssid, 'MyNetwork');
      expect(device?.mqtt.host, 'farm.florafi.net');
      expect(device?.mqtt.port, 123);
      expect(device?.mqtt.ssl, true);
      expect(device?.settings["boolSetting"] as bool, false);
      expect(device?.settings["stringSetting"] as String, 'foobar');
      expect(device?.settings["intSetting"] as int, 1234);
    });

    test(r'satisfies device.isLodaded', () async {
      final device = farm.devices["d1"];

      farm.processMessage(FarmMessage(r'homie/d1/$state', 'ready'));
      farm.processMessage(FarmMessage(r'homie/d1/$stats/uptime', '123'));
      farm.processMessage(FarmMessage(r'homie/d1/$name', 'Some Device'));
      farm.processMessage(FarmMessage(r'homie/d1/$mac', '11:22:33:44:55:66'));
      farm.processMessage(FarmMessage(r'homie/d1/$localip', '1.2.3.4'));
      farm.processMessage(FarmMessage(r'homie/d1/$stats/signal', '78'));
      farm.processMessage(FarmMessage(r'homie/d1/$fw/name', 'fw-name'));
      farm.processMessage(FarmMessage(r'homie/d1/$fw/version', '1.2.3'));
      farm.processMessage(FarmMessage(r'homie/d1/$fw/checksum', 'abcd'));
      farm.processMessage(
          FarmMessage(r'homie/d1/$implementation/config', configJson));

      expect(device?.isLoaded, true);

      final eventStream = events.rest
          .map((e) => e.type)
          .skipWhile((e) => e != FarmEventType.deviceLoaded);
      expect(eventStream, emits(FarmEventType.deviceLoaded));
    });
  });
}
